// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  reviews          Review[]
  currentlyPlaying CurrentlyPlaying[]
  accounts         Account[]
  sessions         Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id          String   @id @default(cuid())
  igdbId      Int      @unique
  title       String
  coverUrl    String?
  description String?
  platforms   String?  // JSON string
  createdAt   DateTime @default(now())
  
  reviews          Review[]
  currentlyPlaying CurrentlyPlaying[]
}

model Review {
  id            String    @id @default(cuid())
  userId        String
  gameId        String
  rating        Float     // 0-10 with .5 increments
  platform      String
  startDate     DateTime?
  finishDate    DateTime?
  playTimeHours Float?
  content       String?   // Review text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  game          Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  screenshots   Screenshot[]
  saveFile      SaveFile?
}

model Screenshot {
  id         String   @id @default(cuid())
  reviewId   String
  url        String
  caption    String?
  uploadedAt DateTime @default(now())
  
  review     Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model SaveFile {
  id         String   @id @default(cuid())
  reviewId   String   @unique
  url        String
  filename   String
  uploadedAt DateTime @default(now())
  
  review     Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model CurrentlyPlaying {
  id            String    @id @default(cuid())
  userId        String
  gameId        String
  platform      String
  startDate     DateTime?
  playTimeHours Float?
  notes         String?   // Optional notes about progress
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  game          Game                        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  screenshots   CurrentlyPlayingScreenshot[]
}

model CurrentlyPlayingScreenshot {
  id                 String           @id @default(cuid())
  currentlyPlayingId String
  url                String
  caption            String?
  uploadedAt         DateTime         @default(now())
  
  currentlyPlaying   CurrentlyPlaying @relation(fields: [currentlyPlayingId], references: [id], onDelete: Cascade)
}
